server:
  port: ${SERVER_PORT:8080}

spring:
  application:
    name: OptimusAPI_Gateway_service

  redis:
    host: ${REDIS_HOST:redis}
    port: ${REDIS_PORT:6379}
    timeout: 60000

  cloud:
    gateway:
      default-filters:
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException
        - name: CircuitBreaker
          args:
            name: defaultCircuitBreaker
            fallbackUri: forward:/fallback
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: ${RATE_LIMITER_REPLENISH_RATE:10}
            redis-rate-limiter.burstCapacity: ${RATE_LIMITER_BURST_CAPACITY:20}
            redis-rate-limiter.requestedTokens: ${RATE_LIMITER_REQUESTED_TOKENS:1}
            key-resolver: "#{@ipKeyResolver}"

      routes:
        - id: auth-service
          uri: ${AUTH_SERVICE_URL:http://localhost:8081}
          predicates:
            - Path=/api/auth/**
          filters:
            - RewritePath=/api/auth/(?<segment>.*), /auth/${segment}
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: ${RATE_LIMITER_REPLENISH_RATE:10}
                redis-rate-limiter.burstCapacity: ${RATE_LIMITER_BURST_CAPACITY:20}
                redis-rate-limiter.requestedTokens: ${RATE_LIMITER_REQUESTED_TOKENS:1}
                key-resolver: "#{@userKeyResolver}"
            - name: CircuitBreaker
              args:
                name: authServiceCircuitBreaker
                fallbackUri: forward:/fallback/auth

        - id: customer-service
          uri: ${CUSTOMER_SERVICE_URL:http://localhost:8082}
          predicates:
            - Path=/api/customers/**
          filters:
            - RewritePath=/api/customers/(?<segment>.*), /customers/${segment}
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: ${RATE_LIMITER_REPLENISH_RATE:10}
                redis-rate-limiter.burstCapacity: ${RATE_LIMITER_BURST_CAPACITY:20}
                redis-rate-limiter.requestedTokens: ${RATE_LIMITER_REQUESTED_TOKENS:1}
                key-resolver: "#{@ipKeyResolver}"
            - name: CircuitBreaker
              args:
                name: customerServiceCircuitBreaker
                fallbackUri: forward:/fallback/customer

      discovery:
        locator:
          enabled: false
#
#      globalcors:
#        add-to-simple-url-handler-mapping: true
#        corsConfigurations:
#          '[/**]':
#            allowed-origins: ${ALLOWED_ORIGINS:http://localhost:8081,http://localhost:8080,http://localhost:8082,http://127.0.0.1:8082,http://127.0.0.1:8081,http://127.0.0.1:8080,http://localhost:5173,http://auth-service:8081,http://customer-service:8082,}
#            allowedMethods: ${ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
#            allowedHeaders:
#              - Authorization
#              - Content-Type
#              - X-Requested-With
#              - Accept
#              - Origin
#              - Access-Control-Request-Method
#              - Access-Control-Request-Headers
#            allowCredentials: ${ALLOW_CREDENTIALS:true}
#            maxAge: 3600

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,gateway
  endpoint:
    health:
      show-details: always
    gateway:
      enabled: true
  health:
    circuitbreakers:
      enabled: true

resilience4j:
  circuitbreaker:
    instances:
      defaultCircuitBreaker:
        sliding-window-size: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 5s
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        sliding-window-type: COUNT_BASED

logging:
  level:
    root: ${LOG_LEVEL:INFO}
    org.springframework.cloud.gateway: DEBUG
    org.springframework.web: WARN
    reactor.netty: WARN

services:
  auth-service-url: ${AUTH_SERVICE_URL:http://localhost:8081}
  customer-service-url: ${CUSTOMER_SERVICE_URL:http://localhost:8082}